Corewar
-------

ASM:

> ./asm champion.s

Parsing fichier .s:

Header:

(NAME|COMMENT)_CMD_STRING "*CHAR"

op.h

[code] [nb_arg] [direct|indrect|reg] [opc] [cycle] [desc.] [?opcode] [0?4:2 o]

Nombre magique : bloc 4 de gauche de l'encadrement de name|description

Instructions :
--------------

Variables :
-----------

REG -> 1 octet

Nombre magique = 0xea83f3

REG: r[i]

Direct: %42, %:label (sur 2 | 4 octets, cf label_size)

Indirect: sur 2 octets

Automate parsing :
------------------

# define NAME		5
# define COMMENT	8

line retournee par GNL

SI strcmp("#", chaine)
	commentaire
SINON
	extract_info(chaine)

STATE header
	while (is_space(*line++))
		;
	si strcmp(".name", line)
		extract_name(line + ft_strlen(NAME))
	sinon si strcmp(".comment", line)
		extract_comment(line + ft_strlen(COMMENT))

STATE instructions

TRANSITIONS

header-instructions
	name != NULL && comment != NULL

Exemples :
__________

label:
	sub r2, r3, r1
	zjmp %:label

	05 54 02 03 01 09 ff fb
PC:	0  1   2  3  4  5

fffb permet a zjmp de revenir 5 octets en arriere

calcul de l'adresse relative du label:

0xFFFF - (nb_octet entre label et zjmp) + 1 (label declare avant)
0x0    + (nb_octet entre label et zjmp) (label declare apres)

exemple:

15 octets avant zjmp:

PC + (0xFFFF - 15 + 1) % ID_MOX

01 11 10 00

sti	r1, %:label, %1
opcode = reg + d + d = 01 10 10 00 = 0x68


	zjmp %:label
	label:
		live%42

	%:label = end - start

Calcul opcode :
---------------

REG = 01
DIR = 10
IND = 11

01 10 10 00
01 00 00 00



opcode sur 4 octets, dernier octet 0x00

instr opcode [args]

live r1, r2, r3

opcode = 0x01
int type[3] = {T_REG, T_REG, T_REG}

tab[0] = 1
tab[1] = 1
tab[2] = 1

char *arg[3]

int			parse_instructions(t_data *d);
int 		check_instructions(struct instr);
int			write_instructions(t_list *instr);

struct s_instr
{
	int		opcode;
	int		type[3];
	char	*arg[3];
	int		opc;

}		t_instr

Extract types :
---------------

REG = "r"
T_LABEL = "%:"
T_DIR = "%"
T_IND = "42" | ":label"

#define

# define T1			0xC901	// 1 9 12 15 16
# define T2			0x1006	// 2 3 13
# define T3			0x26F8	// 4 5 6 7 8 10 11 14

# define T_REG_1	0xA6FC // 3 4 5 6 7 8 10 11 14 16
# define T_REG_2	0x36FE // 2 3 4 5 6 7 8 10 11 13 14
# define T_REG_3	0x26F8 // 4 5 6 7 8 10 11 14

# define T_DIR_1	0x7BE3 // 1 2 6 7 8 9 10 12 13 14 15
# define T_DIR_2	0x26E0 // 6 7 8 10 11 14
# define T_DIR_3	0x400 // 11

# define T_IND_1 	0x32E2 // 2 6 7 8 10 13 14
# define T_IND_2 	0x4E4 // 3 6 7 8 11
# define T_IND_3 	//

# define P_HEADER	1
# define P_INSTR	2

Write instructions
-------------------

live %42
